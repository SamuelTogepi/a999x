#!/bin/bash

version=1.0
real_portable_folder="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$real_portable_folder"
# Log file.
exec > >(tee log.txt) 2>&1
# Load common functions.
source bin/idevice-tool-kit/idevice-tool-kit

echo -e "A999 Activator (A9, iOS 9, 9 years later) v$version\n(C) 2026 Samuel Bowers (3-BSD)\https://github.com/SamuelTogepi/a999x

set_path

iproxy_start() {
    iproxy 6414 22 > /dev/null 2>&1 &
}

iproxy_kill() {
    killall iproxy > /dev/null 2>&1
}

did_you_follow_instructions() {
    pair_iPad
    read -p "* Activate the iPad. IMPORTANT: If you are going to use cellular features on iOS 9, your SIM card should be in the iPad with an active carrier. 

* Sign in to iCloud and complete Setup.app. Get to the home screen. 

* Make sure Find My iPad has been turned off.

After all of the above is true press any key to continue..."
    wait_for_activation
}

is_activated() {

    if ideviceinfo | grep -q "^ActivationState: Activated$"; then
        return 0
    else
        return 1
    fi
}

start_rd() {
    # Enfore Recovery Mode.
    enter_recovery
    ssh_connected=0

    while [[ $ssh_connected != 1 ]]; do
        # Incase this failed previously and is running again, wait.
        wait_for_recovery
        # Stay in Recovery Mode, prevent normal mode booting until ramdisk boots and runs script to restore this. Unless we enter DFU mode accidentally this is the most useful case of enforce_recovery ever.
        enforce_recovery
        # Clear any existing iproxy...
        iproxy_kill
        # Attempt to boot ramdisk...
        (cd bin/Legacy-iOS-Kit && ./restore.sh --no-version-check --no-internet-check --sshrd-boot-rd-only)
        # Restart after ramdisk script kills our usbmuxd.
        usbmuxd_reset   
        # Start our own proxy for USB SSH fresh...
        iproxy_kill
        iproxy_start
        echo "Waiting 5 seconds before testing SSH ramdisk connection, please standby..."
        sleep 5
        # SSH connection check.
        ssh_connected=$(sshpass -p 'alpine' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 6414 root@127.0.0.1 'echo 1' 2>/dev/null)
    done

    # Need to reset this for ramdisk round 2.
    ssh_connected=0

    echo "Booted SSH Ramdisk!"

    #ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 6414 root@127.0.0.1
}

wait_for_activation()
{
    # This confirms the iPad is activated. It does not confirm if iCloud was signed in, if Find My iPad was turned off, or if an active cell service SIM was used during activation.
    while ! is_activated; do
        read -p "iPad is not activated! Please make sure all of the above criteria are true as well and then press enter."
        sleep 1
    done
}

got_all_activation_files() {
    if [[ -f data/$device-$serial/activate/activation_records.tar.gz && \
          -f data/$device-$serial/activate/data_ark.plist.tar.gz && \
          -f data/$device-$serial/activate/IC-Info.sisv.tar.gz && \
          -f data/$device-$serial/activate/com.apple.commcenter.device_specific_nobackup.plist.tar.gz && \
          -f data/$device-$serial/activate/com.apple.factorydata.tar.gz ]]; then
        return 0
    else
        return 1
    fi
}

get_activation() {
    # Need to get activation files.
    echo -e "Existing activation files not backed up yet.\nObtaining activation files..."
    # Hail Mary if on latest iOS 15 already.
    ios_version=$(ideviceinfo 2>/dev/null | grep "ProductVersion" | awk '{print $2}')

    # Set $not_normal when first connecting/detecting iPad if it is in Recovery or DFU Mode.
    if [ "$not_normal" == "true" ]; then
        echo "Your iPad is not in normal mode, so iOS version can not be determined. Restoring iPad to iOS 15.8.5."
        restore_signed_ios=true
    elif [ "$ios_version" != "15.8.5" ]; then
        echo "Latest iOS version is not installed. Restoring iPad to iOS 15.8.5."
        restore_signed_ios=true
    elif [ "$ios_version" == "15.8.5" ]; then
        did_you_follow_instructions
    fi

    if [ "$restore_signed_ios" == "true" ]; then
        restore_signed_ios_for_device
    fi

    # Makes sure we don't stop until we actually get the activation files.
    while ! got_all_activation_files; do
        # Send it...
        start_rd

        expect <<EOF
        # Mount.
        spawn ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 6414 root@127.0.0.1
        expect {
            "continue connecting" {
                send "yes\r"
                exp_continue
            }
            "password:" {
                send "alpine\r"
            }
        }

        expect "#"
        send "mount_filesystems\r"
        expect "#"
        
        # Ramdisk allows RW of / on unjailbroken iOS 15.8.5. on /private/var we have stable RO. RW sometimes doesn't work, so use / as scratch dir.
        send "mkdir /mnt1/activate\r"
        expect "#"
        
        # Copy activation_records.
        send "cp -a /mnt2/containers/Data/System/*/Library/activation_records /mnt1/activate/activation_records\r"
        expect "#"

        # Copy data_ark.plist.
        send "cp -a /mnt2/containers/Data/System/*/Library/activation_records/../internal/data_ark.plist /mnt1/activate\r"
        expect "#"

        # Copy IC-Info.sisv for notifications/ft/imessage/etc
        send "cp -a /mnt2/mobile/Library/FairPlay/iTunes_Control/iTunes/IC-Info.sisv /mnt1/activate\r"
        expect "#"

        # Copy com.apple.commcenter.device_specific_nobackup.plist
        send "cp -a /mnt2/wireless/Library/Preferences/com.apple.commcenter.device_specific_nobackup.plist /mnt1/activate\r"
        expect "#"
        
        # Copy com.apple.factorydata
        send "cp -a /mnt1/System/Library/Caches/com.apple.factorydata /mnt1/activate/com.apple.factorydata\r"
        expect "#"

        # Create tars.
        send "cd /mnt1/activate\r"
        expect "#"
        
        # activation_records.
        send "tar zcf activation_records.tar.gz activation_records\r"
        expect "#"

        # data_ark.plist.
        send "tar zcf data_ark.plist.tar.gz data_ark.plist\r"
        expect "#"
        send "rm data_ark.plist\r"
        expect "#"
        
        # IC-Info.sisv. 
        # Silence error: "tar: copyfile pack (IC-Info.sisv) failed: No such file or directory" because we still get the file fine.
        send "tar zcf IC-Info.sisv.tar.gz IC-Info.sisv > /dev/null 2>&1\r"
        expect "#"
        send "rm IC-Info.sisv\r"
        expect "#"

        # com.apple.commcenter.device_specific_nobackup.plist.
        send "tar zcf com.apple.commcenter.device_specific_nobackup.plist.tar.gz com.apple.commcenter.device_specific_nobackup.plist\r"
        expect "#"
        send "rm com.apple.commcenter.device_specific_nobackup.plist\r"
        expect "#"

        # com.apple.factorydata.
        send "tar zcf com.apple.factorydata.tar.gz com.apple.factorydata\r"
        expect "#"

        # Delete all directories.
        send "rm -rf */\r"
        expect "#"

        send "exit\r"

        # Transfer tars to computer.
        spawn scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r -P 6414 root@127.0.0.1:/mnt1/activate data/$device-$serial
        expect {
            "continue connecting" {
                send "yes\r"
                exp_continue
            }
            "password:" {
                send "alpine\r"
            }
        }
        expect eof  

        # Unmount and Reboot.
        spawn ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 6414 root@127.0.0.1
        expect {
            "continue connecting" {
                send "yes\r"
                exp_continue
            }
            "password:" {
                send "alpine\r"
            }
        }

        expect "#"
        send "reboot\r"
        expect "closed by remote host."
        expect eof
EOF

        iproxy_kill

        # Check to see if user follows instructions.  If not when we get back to restore_ipsw() it will prompt to go through get_activation() again.
        if ! got_all_activation_files; then
            echo "Error: not all activation files were backed up. Please make sure you complete all steps before activation files are backed up. A999 Activator will try getting activation files again."
            read -p "Press any key to continue..."
        fi
    done
}

downgrade() {    
    # Get Activation files.
    while ! got_all_activation_files; do
        get_activation
    done

    restore_ios_10_2_1_for_device
    # Enable all steps for final restore.
    not_final_restore=false
    restore_ipsw $1
    start_rd

    expect <<EOF
    # Set up /.
    spawn ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 6414 root@127.0.0.1
    expect {
        "continue connecting" {
            send "yes\r"
            exp_continue
        }
        "password:" {
            send "alpine\r"
        }
    }

    expect "#"
    send "mount_hfs /dev/disk0s1s1 /mnt1\r"
    expect "#"
    send "mount_hfs /dev/disk0s1s2 /mnt2\r"
    expect "#"
    send "rm -rf /mnt1/activation\r"
    expect "#"
    send "mkdir /mnt1/Library/LaunchDaemons\r"
    expect "#"
    send "exit\r"

    # Transfer activation tars to phone.
    spawn scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r -P 6414 data/$device-$serial/activate root@127.0.0.1:/mnt1
    expect {
        "continue connecting" {
            send "yes\r"
            exp_continue
        }
        "password:" {
            send "alpine\r"
        }
    }
    expect eof

    # Transfer launch daemon com.alex.activate.plist to host.
    spawn scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P 6414 payload/com.alex.activate.plist root@127.0.0.1:/mnt1/Library/LaunchDaemons
    expect {
        "continue connecting" {
            send "yes\r"
            exp_continue
        }
        "password:" {
            send "alpine\r"
        }
    }
    expect eof

    # Transfer activate script to host.
    spawn scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P 6414 payload/activate root@127.0.0.1:/mnt1/usr/bin
    expect {
        "continue connecting" {
            send "yes\r"
            exp_continue
        }
        "password:" {
            send "alpine\r"
        }
    }
    expect eof

    # Transfer freeze.tar to host.
    spawn scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P 6414 bin/Legacy-iOS-Kit/resources/jailbreak/freeze.tar root@127.0.0.1:/mnt1
    expect {
        "continue connecting" {
            send "yes\r"
            exp_continue
        }
        "password:" {
            send "alpine\r"
        }
    }
    expect eof

    # Transfer launchctl.tar to host.
    spawn scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P 6414 bin/Legacy-iOS-Kit/resources/jailbreak/launchctl.tar root@127.0.0.1:/mnt1
    expect {
        "continue connecting" {
            send "yes\r"
            exp_continue
        }
        "password:" {
            send "alpine\r"
        }
    }
    expect eof

    # Transfer io.pangu93.loader.plist to host.
    spawn scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P 6414 bin/Legacy-iOS-Kit/resources/jailbreak/io.pangu93.loader.plist root@127.0.0.1:/mnt1/Library/LaunchDaemons
    expect {
        "continue connecting" {
            send "yes\r"
            exp_continue
        }
        "password:" {
            send "alpine\r"
        }
    }
    expect eof

    # Transfer plutil (from com.bingner.plutil_0.2.1_iPados-arm.deb) to host.
    spawn scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P 6414 payload/plutil root@127.0.0.1:/mnt1/usr/bin/plutil
    expect {
        "continue connecting" {
            send "yes\r"
            exp_continue
        }
        "password:" {
            send "alpine\r"
        }
    }
    expect eof

    spawn ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 6414 root@127.0.0.1
    expect {
        "continue connecting" {
            send "yes\r"
            exp_continue
        }
        "password:" {
            send "alpine\r"
        }
    }

    expect "#"

    # Set permissions for activate.
    send "chmod 755 /mnt1/usr/bin/activate\r"
    expect "#"
    send "chown root:wheel /mnt1/usr/bin/activate\r"
    expect "#"

    # Set permissions for plutil.
    send "chmod 755 /mnt1/usr/bin/plutil\r"
    expect "#"
    send "chown root:wheel /mnt1/usr/bin/plutil\r"
    expect "#"

    # Install chflags from ramdisk
    send "cp -a /usr/bin/chflags /mnt1/usr/bin/chflags\r"
    expect "#"

    # Set permissions for launch daemon com.alex.activate.plist.
    expect "#"
    send "chmod 644 /mnt1/Library/LaunchDaemons/com.alex.activate.plist\r"
    expect "#"
    send "chown root:wheel /mnt1/Library/LaunchDaemons/com.alex.activate.plist\r"
    expect "#"
    
    # Move Setup.app to prevent possible deactivation causing it to trigger.
    send "mv /mnt1/Applications/Setup.app /mnt1/Applications/Setup.bak\r"
    expect "#"
    
    # BEGIN JAILBREAK BOOTSTRAP INSTALLATION.
    # Set permissions for launch daemon io.pangu93.loader.plist.
    send "chmod 644 /mnt1/Library/LaunchDaemons/io.pangu93.loader.plist \r"
    expect "#"
    send "chown root:wheel /mnt1/Library/LaunchDaemons/io.pangu93.loader.plist\r"
    expect "#"

    send "cd /mnt1\r"
    expect "#"

    # Extract freeze.tar.
    send "tar -xf freeze.tar -C .\r"
    expect "#"
    send "rm freeze.tar\r"
    expect "#"

    # Extract launchctl.tar.
    send "tar -xf launchctl.tar -C .\r"
    expect "#"
    send "rm launchctl.tar\r"
    expect "#"

    # Is this the symlink trick to write to /var?) 
    send "mv private/var/lib private\r"
    expect "#"
    send "mv private/var/mobile/Library/Preferences/com.apple.springboard.plist private\r"
    expect "#"
    send "rm -r private/var/*\r"
    expect "#"
    send "touch .cydia_no_stash\r"
    expect "#"
    send "cd /mnt2\r"
    expect "#"
    send "ln -s /private/lib\r"
    expect "#"
    send "cd mobile/Library/Preferences\r"
    expect "#"
    send "rm -f com.apple.springboard.plist\r"
    expect "#"
    send "ln -s /private/com.apple.springboard.plist\r"
    expect "#"
    send "chown 501:501 com.apple.springboard.plist\r"
    expect "#"
    send "exit\r"

    # Unmount and Reboot. Spawn a new session because symlink trick is weird and prevents unmounting /mnt2.
    spawn ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 6414 root@127.0.0.1
    expect {
        "continue connecting" {
            send "yes\r"
            exp_continue
        }
        "password:" {
            send "alpine\r"
        }
    }

    expect "#"
    send "umount /mnt1\r"
    expect "#"
    send "umount /mnt2\r"
    expect "#"
    send "reboot\r"
    expect "closed by remote host."
    expect eof
EOF

    iproxy_kill
    boot_turdusra1n
    
    echo "Your iPad is now jailbroken! You need to enable it now by visiting http://jbme.ddw.nu/ in Safari after signing in to your WiFi. Once the jailbreak is enabled, your iPad will automatically reboot into Recovery Mode after restoring activation. Do not sign in to iCloud just yet! a999activator is going to start checking for Recovery Mode in 45 seconds so that the LAST STEP can be completed!"
    sleep 45

    boot_turdusra1n
    generate_boot_script
    echo "Activation was restored! You need to enable the jailbreak with http://jbme.ddw.nu in Safari everytime you boot, but your done!"

    case "$ver" in
        9.2*)
            echo "IMPORTANT INFORMATION FOR iOS 9.2 AND iOS 9.2.1 USERS (WHICH YOU ARE): DO NOT SIGN IN TO ICLOUD IN SETUP.APP! It will not work. Instead, complete Setup.app without signing in and get to the home screen. Then, sign in to iCloud with the Settings app!"
            ;;
        9.3*)
            echo "IMPORTANT INFORMATION FOR iOS 9.3, iOS 9.3.1, iOS 9.3.2, AND iOS 9.3.3 USERS (WHICH YOU ARE): iMessage and FaceTime do not work yet!"
            if [ $device != "ipad_pro_9.7" ]; then
                echo "If you need iMessage and or FaceTime downgrade to iOS 9.2 or iOS 9.2.1 instead."
            fi
            ;;
    esac

    echo -e "\nDONE!\n"
}

ipad_pro_12.9_firmware_select() {
    PS3="Select iOS version to downgrade to: "
    options=(
        "9.2 (13C75) (12/8/2015)"
        "9.2.1 (13D15) (1/19/2016)"
        #"9.2.1 (13D20) (2/18/2016)" Can't use because jbme doesn't support it
        "9.3 (13E234) (3/21/2016)"
        "9.3.1 (13E238) (3/31/2016)"
        "9.3.2 (13F69) (5/16/2016)"
        "9.3.3 (13G34) (7/18/2016)"
        "Exit"
    )

    select opt in "${options[@]}"
    do
        case $opt in
            "9.2 (13C75) (12/8/2015)")
                downgrade (WiFi) http://appldnld.apple.com/ios9.2/031-29140-20151203-674A1328-8D8A-11E5-BD43-55618B8BECEB/iPad6,7_9.2_13C75_Restore.ipsw
                break;
                downgrade (WiFi+LTE) http://appldnld.apple.com/ios9.2/031-29216-20151203-674A518A-8D8A-11E5-97B3-57618B8BECEB/iPad6,8_9.2_13C75_Restore.ipsw
                break
                ;;
            "9.2.1 (13D15) (1/19/2016)")
                downgrade (WiFi) http://appldnld.apple.com/ios9.2.1/031-47563-20160119-8C3DDEA8-B968-11E5-918A-CB4A8FD31F8F/iPad6,7_9.2.1_13D15_Restore.ipsw
                break;
                downgrade (WiFi+LTE) http://appldnld.apple.com/ios9.2.1/031-47548-20160119-8C3DB6D0-B968-11E5-AD30-CD4A8FD31F8F/iPad6,8_9.2.1_13D15_Restore.ipsw
                break
                ;;
            #"9.2.1 (13D20) (2/18/2016)") Can't use because jbme doesn't support it
                #downgrade (WiFi) http://appldnld.apple.com/ios9.2.1/031-48671-20160217-4BB46F46-D44D-11E5-8BAB-0052919DCAD8/iPad6,7_9.2.1_13D20_Restore.ipsw
                #break;
                #downgrade (WiFi+LTE) http://appldnld.apple.com/ios9.2.1/031-47548-20160119-8C3DB6D0-B968-11E5-AD30-CD4A8FD31F8F/iPad6,8_9.2.1_13D15_Restore.ipsw
                #break
                #;;
            "9.3 (13E234) (3/21/2016)")
                downgrade (WiFi) http://appldnld.apple.com/iOS9.3/031-28362-20160321-5101CF90-EAA8-11E5-951B-CC79BD379832/iPad6,7_9.3_13E233_Restore.ipsw
                break;
                downgrade (WiFi+LTE) http://appldnld.apple.com/iOS9.3.1/031-55357-20160331-09B68CEA-F5E6-11E5-B924-2BCB2D794EB1/iPad6,8_9.3.1_13E238_Restore.ipsw
                break;
                ;;
            "9.3.1 (13E238) (3/31/2016)")
                downgrade (WiFi) http://appldnld.apple.com/iOS9.3.1/031-54964-20160331-099887E0-F5E6-11E5-8F56-1FCB2D794EB1/iPad6,7_9.3.1_13E238_Restore.ipsw
                break;
                downgrade (WiFi+LTE) http://appldnld.apple.com/iOS9.3.1/031-55357-20160331-09B68CEA-F5E6-11E5-B924-2BCB2D794EB1/iPad6,8_9.3.1_13E238_Restore.ipsw
                break;
                ;;
            "9.3.2 (13F69) (5/16/2016)")
                downgrade (WiFi) http://appldnld.apple.com/ios9.3.2/031-62618-20160516-D6E79C64-13A9-11E6-9BD6-45DA400DF7EB/iPad6,7_9.3.2_13F69_Restore.ipsw
                break;
                downgrade (WiFi+LTE) http://appldnld.apple.com/ios9.3.2/031-62062-20160516-6A1A9458-13A7-11E6-8779-B8D6400DF7EB/iPad6,8_9.3.2_13F69_Restore.ipsw
                break;
                ;;
            "9.3.3 (13G34) (7/18/2016)")
                downgrade (WiFi) http://appldnld.apple.com/iOS9.3.3/031-60723-20160718-55B463EE-4378-11E6-9EA0-C4FB59E0E9B6/iPad6,7_9.3.3_13G34_Restore.ipsw
                break;
                downgrade (WiFi+LTE) http://appldnld.apple.com/iOS9.3.3/031-60339-20160718-06EB8404-4378-11E6-A195-9DF759E0E9B6/iPad6,8_9.3.3_13G34_Restore.ipsw
                ;;
            "Exit")
                break
                ;;
            *)
                echo "Invalid option"
                ;;
        esac
    done
}

ipad_pro_9.7_firmware_select() {

    PS3="Select iOS version to downgrade to: "
    options=(
        "9.3 (13E232) (3/21/2016)"
        "9.3.1 (13E238) (3/31/2016)"
        "9.3.2 (13F69) (5/16/2016)"
        #"9.3.2 (13F72) (6/2/2016)" Can't use because jbme doesn't support it
        "9.3.3 (13G34) (7/18/2016)"
        "Exit"
    )

    select opt in "${options[@]}"
    do
        case $opt in
            "9.3 (13E233) (3/21/2016)")
                downgrade (WiFi) http://appldnld.apple.com/iOS9.3/031-20813-20160321-50FF2B1E-EAA8-11E5-A40C-C179BD379832/iPad6,3_9.3_13E234_Restore.ipsw
                break;
                downgrade (WiFi+LTE) http://appldnld.apple.com/iOS9.3/031-20816-20160321-50FFD67C-EAA8-11E5-AD85-C979BD379832/iPad6,4_9.3_13E234_Restore.ipsw
                ;;
            "9.3.1 (13E238) (3/31/2016)")
                downgrade (WiFi) http://appldnld.apple.com/iOS9.3.1/031-54866-20160331-09994CCA-F5E6-11E5-8354-1DCB2D794EB1/iPad6,3_9.3.1_13E238_Restore.ipsw
                break;
                downgrade (WiFi+LTE) http://appldnld.apple.com/iOS9.3.1/031-55689-20160331-09B75440-F5E6-11E5-9FEA-37CB2D794EB1/iPad6,4_9.3.1_13E238_Restore.ipsw
                ;;
            "9.3.2 (13F69) (5/16/2016)")
                downgrade (WiFi) http://appldnld.apple.com/ios9.3.2/031-62643-20160516-F67BDAE0-13A9-11E6-A5A3-AEDA400DF7EB/iPad6,3_9.3.2_13F69_Restore.ipsw
                break;
                downgrade (WiFi+LTE) http://appldnld.apple.com/ios9.3.2/031-62198-20160516-11E03836-13A9-11E6-832E-F4D8400DF7EB/iPad6,4_9.3.2_13F69_Restore.ipsw
                ;;
            #"9.3.2 (13F72) (6/2/2016)") Can't use because jbme doesn't support it
                #downgrade (WiFi) http://appldnld.apple.com/ios9.3.2/031-63513-20160531-52E11156-2665-11E6-8860-F0F5662719FC/iPad6,3_9.3.2_13F72_Restore.ipsw
                #break;
                #downgrade (WiFi+LTE) http://appldnld.apple.com/ios9.3.2/031-63521-20160531-52E11160-2665-11E6-8860-F1F5662719FC/iPad6,4_9.3.2_13F72_Restore.ipsw
                #break
                #;;
            "9.3.3 (13G34) (7/18/2016)")
                downgrade (WiFi) http://appldnld.apple.com/iOS9.3.3/031-60435-20160718-06EB0394-4378-11E6-AB0E-9FF759E0E9B6/iPad6,3_9.3.3_13G34_Restore.ipsw
                break;
                downgrade (WiFi+LTE) http://appldnld.apple.com/iOS9.3.3/031-60169-20160718-06E9897E-4378-11E6-B6BC-93F759E0E9B6/iPad6,4_9.3.3_13G34_Restore.ipsw
                ;;
            "Exit")
                break
                ;;
            *)
                echo "Invalid option"
                ;;
        esac
    done
}

# Begin actual execution. 

# When this script exits, automatically restart usbmuxd as normal. We are root at this point that this takes effect (on Linux).
cleanup() 
{
    if [ "$os" = "Linux" ]; then 
        usbmuxd_reset
    fi
}
trap cleanup EXIT

# Check for the existence of the binary launch daemon which is generated for the release by the build script.
if [ ! -f "payload/com.alex.activate.plist" ]; then
    echo "Error: can not find payload/com.alex.activate.plist. This most likely means you are trying to execute a999 from the source tree, rather then a release which is not allowed. Please execute the build command in the source tree and cd into the built release. If you downloaded an a999activator release and are getting this error, you release is incomplete and missing a neccesary file. Please redownload the release and run a999activator again."
    exit 1
fi

# Update functionallity. We need to get 2 things, the data folder and any boot* scripts.
if [ "$1" == "-u" ]; then
    if [ "$#" -ne 2 ]; then
        echo "You gave the -u argument, which expect an existing a999activator release directory as the following argument."
        exit 1
    fi

    update_existing_data "$2"
fi

startup
detect_iphone

if [ $device == "ipad_pro_12.9" ]; then
    ipad_pro_12.9_firmware_select
elif [ $device == "ipad_pro_9.7" ]; then
    ipad_pro_9.7_firmware_select
fi
